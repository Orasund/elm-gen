// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Js_exn = require("rescript/lib/js/js_exn.js");
var Js_dict = require("rescript/lib/js/js_dict.js");
var Handlebars = require("handlebars");
var Caml_js_exceptions = require("rescript/lib/js/caml_js_exceptions.js");

var elmGen = "elm-gen";

Handlebars.registerHelper("capitalize", (function (aString) {
        return aString.charAt(0).toUpperCase() + aString.substring(1);
      }));

Handlebars.registerHelper("decapitalize", (function (aString) {
        return aString.charAt(0).toLowerCase() + aString.substring(1);
      }));

function constructData(moduleBase, moduleName, template, baseData) {
  baseData.moduleBase = moduleBase;
  baseData.moduleName = moduleName;
  baseData.template = template;
  return baseData;
}

function generateModule(moduleBase, moduleName, template, baseData) {
  var data = constructData(moduleBase, moduleName, template, baseData);
  console.log(data);
  try {
    var templateData = Fs.readFileSync(".elm-gen/templates/" + data.template + ".elm", "utf8");
    var template$1 = Handlebars.compile(templateData, {
          strict: true
        });
    var output = template$1(data);
    var dir = ".elm-gen/generated/" + data.moduleBase.replace(".", "/") + ("/" + data.template);
    var generatedPath = dir + "/" + data.moduleName + ".elm";
    if (!Fs.existsSync(dir)) {
      Fs.mkdirSync(dir, {
            recursive: true
          });
    }
    return Fs.writeFileSync(generatedPath, output, {
                flag: "w+"
              });
  }
  catch (raw_err){
    var err = Caml_js_exceptions.internalToOCamlException(raw_err);
    if (err.RE_EXN_ID === Js_exn.$$Error) {
      console.error(err._1);
      return ;
    }
    throw err;
  }
}

try {
  var json = JSON.parse(Fs.readFileSync("elm-gen.json", "utf8"));
  Js_dict.entries(json.modules).forEach(function (tup) {
        var moduleName = tup[0];
        var moduleBase = json.moduleBase;
        Js_dict.entries(tup[1]).forEach(function (tuple) {
              return generateModule(moduleBase, moduleName, tuple[0], tuple[1]);
            });
        
      });
}
catch (raw_err){
  var err = Caml_js_exceptions.internalToOCamlException(raw_err);
  if (err.RE_EXN_ID === Js_exn.$$Error) {
    console.error(err._1);
  } else {
    throw err;
  }
}

exports.elmGen = elmGen;
exports.constructData = constructData;
exports.generateModule = generateModule;
/*  Not a pure module */
