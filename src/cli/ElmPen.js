// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Ajv = require("ajv");
var Util = require("./Util.js");
var Js_exn = require("rescript/lib/js/js_exn.js");
var Js_dict = require("rescript/lib/js/js_dict.js");
var FileSystem = require("./FileSystem.js");
var Handlebars = require("./Handlebars.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Child_process = require("child_process");
var Caml_exceptions = require("rescript/lib/js/caml_exceptions.js");
var Caml_js_exceptions = require("rescript/lib/js/caml_js_exceptions.js");

var Default = /* @__PURE__ */Caml_exceptions.create("ElmPen.Default");

function run(param) {
  var elmGen = "elm-pen";
  var copyAndRead = function (readFrom, copyFrom, file) {
    var data = FileSystem.read(readFrom + "/" + file);
    if (data !== undefined) {
      return data;
    } else {
      FileSystem.createFolder(readFrom);
      if (FileSystem.copyFile(readFrom + "/" + file, copyFrom + "/" + file)) {
        return FileSystem.read(readFrom + "/" + file);
      } else {
        return ;
      }
    }
  };
  var getTemplateData = function (templatesFrom, template) {
    var readFrom = templatesFrom + "/" + template;
    var copyFrom = "templates/" + template;
    return copyAndRead(readFrom, copyFrom, "Template.elm");
  };
  var getConfigData = function (schemasFrom, schema) {
    var readFrom = schemasFrom + "/" + schema;
    var copyFrom = "templates/" + schema;
    return copyAndRead(readFrom, copyFrom, "Config.json");
  };
  Handlebars.init(undefined);
  var ajv = new Ajv();
  var generate = function (json, templatesFrom) {
    var generateInto = Util.getOrThrow(json.generateInto, "❌ field " + "generateInto" + " is missing in " + elmGen + ".json");
    var moduleBase = Util.getOrThrow(json.moduleBase, "❌ field " + "moduleBase" + " is missing in " + elmGen + ".json");
    FileSystem.remove(generateInto);
    Js_dict.entries(json.modules).forEach(function (tup) {
          var moduleName = tup[0];
          Js_dict.entries(tup[1]).forEach(function (tuple) {
                var data = Util.constructData(moduleBase, moduleName, tuple[0], tuple[1]);
                var moduleBase$1 = data.moduleBase;
                var moduleName$1 = data.moduleName;
                var template = data.template;
                try {
                  var data$1 = getTemplateData(templatesFrom, template);
                  var templateData = data$1 !== undefined ? data$1 : (console.log("❌ Error while generating " + moduleName$1 + " " + template + ":"), Js_exn.raiseError("Could not find the template inside " + templatesFrom + "/" + template));
                  var data$2 = getConfigData(templatesFrom, template);
                  var configData = data$2 !== undefined ? JSON.parse(data$2) : (console.log("❌ Error while generating " + moduleName$1 + " " + template + ":"), Js_exn.raiseError("Could not find the config inside " + templatesFrom + "/" + template));
                  var schema = configData.schema;
                  if (schema !== undefined) {
                    var schema$1 = Caml_option.valFromOption(schema);
                    try {
                      ajv.compile(schema$1);
                    }
                    catch (raw_err){
                      var err = Caml_js_exceptions.internalToOCamlException(raw_err);
                      if (err.RE_EXN_ID === Js_exn.$$Error) {
                        console.log("❌ The " + template + " json schema is is illformed:");
                        console.error(err._1);
                        Js_exn.raiseError("Could not generate " + moduleName$1 + " " + template);
                      } else {
                        throw err;
                      }
                    }
                    var validate = ajv.compile(schema$1);
                    var valid = validate(data);
                    if (!valid) {
                      console.log("❌ Error in " + template + " " + moduleName$1 + ":");
                      validate.errors.forEach(function (err) {
                            console.error("    " + err.instancePath + " " + err.message);
                            
                          });
                      throw {
                            RE_EXN_ID: Default,
                            _1: "Could not generate " + moduleName$1 + " " + template,
                            Error: new Error()
                          };
                    }
                    
                  } else {
                    console.log("❌ Error in " + template + " " + moduleName$1 + " :");
                    throw {
                          RE_EXN_ID: Default,
                          _1: "Could not find schema in config file",
                          Error: new Error()
                        };
                  }
                  var namespace = moduleBase$1.replace(".", "/");
                  FileSystem.write(Handlebars.compile(data, templateData), {
                        path: generateInto + "/" + namespace + "/" + template,
                        file: moduleName$1 + ".elm"
                      });
                  console.log("⭐ Generated " + template + " " + moduleName$1);
                  return ;
                }
                catch (raw_err$1){
                  var err$1 = Caml_js_exceptions.internalToOCamlException(raw_err$1);
                  if (err$1.RE_EXN_ID === Js_exn.$$Error) {
                    console.error(err$1._1);
                    return ;
                  }
                  throw err$1;
                }
              });
          
        });
    var path = json.pathToElmFormat;
    if (path !== undefined) {
      return Child_process.exec(path + " " + generateInto + " --yes");
    }
    
  };
  try {
    return FileSystem.installAndThen(elmGen + ".json", generate);
  }
  catch (raw_err){
    var err = Caml_js_exceptions.internalToOCamlException(raw_err);
    if (err.RE_EXN_ID === Js_exn.$$Error) {
      console.error(err._1);
      return ;
    }
    if (err.RE_EXN_ID === Default) {
      console.error(err._1);
      return ;
    }
    throw err;
  }
}

exports.Default = Default;
exports.run = run;
/* ajv Not a pure module */
