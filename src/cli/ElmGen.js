// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Util = require("./Util.js");
var Js_exn = require("rescript/lib/js/js_exn.js");
var Js_dict = require("rescript/lib/js/js_dict.js");
var FileSystem = require("./FileSystem.js");
var Handlebars = require("./Handlebars.js");
var Child_process = require("child_process");
var Caml_js_exceptions = require("rescript/lib/js/caml_js_exceptions.js");

function run(param) {
  var getTemplateData = function (templatesFrom, template) {
    var file = templatesFrom + "/" + template + ".elm";
    var copyFrom = "templates/" + template + ".elm";
    var data = FileSystem.read(file);
    if (data !== undefined) {
      return data;
    } else if (FileSystem.copyFile(file, copyFrom)) {
      return FileSystem.read(file);
    } else {
      return ;
    }
  };
  Handlebars.init(undefined);
  var generate = function (json, templatesFrom) {
    var generateInto = Util.getOrThrow(json.generateInto, "❌ field " + "generateInto" + " is missing in elm-gen.json");
    var moduleBase = Util.getOrThrow(json.moduleBase, "❌ field " + "moduleBase" + " is missing in elm-gen.json");
    FileSystem.remove(generateInto);
    Js_dict.entries(json.modules).forEach(function (tup) {
          var moduleName = tup[0];
          Js_dict.entries(tup[1]).forEach(function (tuple) {
                var data = Util.constructData(moduleBase, moduleName, tuple[0], tuple[1]);
                var moduleBase$1 = data.moduleBase;
                var moduleName$1 = data.moduleName;
                var template = data.template;
                try {
                  var data$1 = getTemplateData(templatesFrom, template);
                  var templateData = data$1 !== undefined ? data$1 : Js_exn.raiseError("❌ Could not find " + template + ".elm inside " + templatesFrom);
                  var namespace = moduleBase$1.replace(".", "/");
                  FileSystem.write(Handlebars.compile(data, templateData), {
                        path: generateInto + "/" + namespace + "/" + template,
                        file: moduleName$1 + ".elm"
                      });
                  console.log("⭐ Generated " + template + " " + moduleName$1);
                  return ;
                }
                catch (raw_err){
                  var err = Caml_js_exceptions.internalToOCamlException(raw_err);
                  if (err.RE_EXN_ID === Js_exn.$$Error) {
                    console.error(err._1);
                    return ;
                  }
                  throw err;
                }
              });
          
        });
    var path = json.pathToElmFormat;
    if (path !== undefined) {
      return Child_process.exec(path + " " + generateInto + " --yes");
    }
    
  };
  try {
    return FileSystem.installAndThen("elm-gen" + ".json", generate);
  }
  catch (raw_err){
    var err = Caml_js_exceptions.internalToOCamlException(raw_err);
    if (err.RE_EXN_ID === Js_exn.$$Error) {
      console.error(err._1);
      return ;
    }
    throw err;
  }
}

exports.run = run;
/* Util Not a pure module */
