// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Js_exn = require("rescript/lib/js/js_exn.js");
var Js_dict = require("rescript/lib/js/js_dict.js");
var Handlebars = require("handlebars");
var Child_process = require("child_process");
var Caml_js_exceptions = require("rescript/lib/js/caml_js_exceptions.js");

function run(param) {
  var constructData = function (moduleBase, moduleName, template, baseData) {
    baseData.moduleBase = moduleBase;
    baseData.template = template;
    baseData.moduleName = moduleName;
    return baseData;
  };
  Handlebars.registerHelper("capitalize", (function (aString) {
          if (aString !== undefined) {
            if (aString === "") {
              return Js_exn.raiseError("can't capitalize an empty argument");
            } else {
              return aString.charAt(0).toUpperCase() + aString.substring(1);
            }
          } else {
            return Js_exn.raiseError("can't capitalize an undefined argument");
          }
        }));
  Handlebars.registerHelper("decapitalize", (function (aString) {
          if (aString !== undefined) {
            if (aString === "") {
              return Js_exn.raiseError("can't decapitalize an empty argument");
            } else {
              return aString.charAt(0).toLowerCase() + aString.substring(1);
            }
          } else {
            return Js_exn.raiseError("can't decapitalize an undefined argument");
          }
        }));
  try {
    var json = JSON.parse(Fs.readFileSync("elm-gen" + ".json", "utf8"));
    var match = json.generateInto;
    var match$1 = json.templatesFrom;
    var match$2 = json.moduleBase;
    if (match !== undefined) {
      if (match$1 !== undefined) {
        if (match$2 !== undefined) {
          if (!Fs.existsSync(match)) {
            return ;
          }
          Fs.rmSync(match, {
                recursive: true
              });
          Js_dict.entries(json.modules).forEach(function (tup) {
                var moduleName = tup[0];
                Js_dict.entries(tup[1]).forEach(function (tuple) {
                      var data = constructData(match$2, moduleName, tuple[0], tuple[1]);
                      var moduleBase = data.moduleBase;
                      var moduleName$1 = data.moduleName;
                      var template = data.template;
                      try {
                        var templateData = Fs.readFileSync(match$1 + "/" + template + ".elm", "utf8");
                        var moduleTemplate = Handlebars.compile(templateData, {
                              strict: true,
                              noEscape: true
                            });
                        var output = moduleTemplate(data);
                        var namespace = moduleBase.replace(".", "/");
                        var dir = match + "/" + namespace + "/" + template;
                        var generatedPath = dir + "/" + moduleName$1 + ".elm";
                        if (!Fs.existsSync(dir)) {
                          Fs.mkdirSync(dir, {
                                recursive: true
                              });
                        }
                        Fs.writeFileSync(generatedPath, output, {
                              flag: "w+"
                            });
                        console.log("‚≠ê Generated " + template + " " + moduleName$1);
                        return ;
                      }
                      catch (raw_err){
                        var err = Caml_js_exceptions.internalToOCamlException(raw_err);
                        if (err.RE_EXN_ID === Js_exn.$$Error) {
                          console.error(err._1);
                          return ;
                        }
                        throw err;
                      }
                    });
                
              });
          var path = json.pathToElmFormat;
          if (path !== undefined) {
            return Child_process.exec(path + " " + match + " --yes");
          } else {
            return ;
          }
        }
        console.error("field \"moduleBase\" is missing in elm-gen.json");
        return ;
      }
      console.error("field \"templatesFrom\" is missing in elm-gen.json");
      return ;
    }
    console.error("field \"generateInto\" is missing in elm-gen.json");
    return ;
  }
  catch (raw_err){
    var err = Caml_js_exceptions.internalToOCamlException(raw_err);
    if (err.RE_EXN_ID === Js_exn.$$Error) {
      console.error(err._1);
      return ;
    }
    throw err;
  }
}

exports.run = run;
/* fs Not a pure module */
