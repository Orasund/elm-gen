// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Util = require("./Util.js");
var Path = require("path");
var Curry = require("rescript/lib/js/curry.js");
var Js_exn = require("rescript/lib/js/js_exn.js");
var FsExtra = require("fs-extra");
var Caml_js_exceptions = require("rescript/lib/js/caml_js_exceptions.js");

function createFolder(dir) {
  if (!Fs.existsSync(Path.normalize(dir))) {
    return Fs.mkdirSync(Path.normalize(dir), {
                recursive: true
              });
  }
  
}

function copyFile(fileName, origin) {
  try {
    Fs.copyFileSync(Path.normalize(__dirname + "/" + origin), fileName);
    return true;
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === Js_exn.$$Error) {
      return false;
    }
    throw exn;
  }
}

function read(file) {
  try {
    return Fs.readFileSync(Path.normalize(file), "utf8");
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === Js_exn.$$Error) {
      return ;
    }
    throw exn;
  }
}

function remove(folder) {
  if (Fs.existsSync(Path.normalize(folder))) {
    return Fs.rmSync(Path.normalize(folder), {
                recursive: true
              });
  }
  
}

function write(source, args) {
  var dir = args.path;
  var generatedPath = dir + "/" + args.file;
  createFolder(dir);
  return Fs.writeFileSync(Path.normalize(generatedPath), source, {
              flag: "w+"
            });
}

function installAndThen(fileName, fun) {
  if (!Fs.existsSync(fileName) && !copyFile(fileName, fileName)) {
    Js_exn.raiseError("❌ Could not copy " + Path.normalize(fileName) + " into " + fileName);
  }
  var string = read(fileName);
  var json = string !== undefined ? JSON.parse(string) : Js_exn.raiseError("❌ Could not find " + fileName);
  var templatesFrom = Util.getOrThrow(json.templatesFrom, "\xe2\x9d\x8c field \"templatesFrom\" is missing in elm-gen.json");
  var origin = "templates/";
  var fun$1 = function (param) {
    return Curry._2(fun, json, templatesFrom);
  };
  if (Fs.existsSync(templatesFrom)) {
    return Curry._1(fun$1, undefined);
  } else {
    return FsExtra.copy(Path.normalize(__dirname + "/" + origin), templatesFrom, (function (nullable) {
                  if (nullable == null) {
                    return Curry._1(fun$1, undefined);
                  } else {
                    return Js_exn.raiseError(nullable);
                  }
                }));
  }
}

exports.createFolder = createFolder;
exports.copyFile = copyFile;
exports.read = read;
exports.remove = remove;
exports.write = write;
exports.installAndThen = installAndThen;
/* fs Not a pure module */
