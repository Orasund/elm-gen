// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Util = require("./Util.js");
var Path = require("path");
var Curry = require("rescript/lib/js/curry.js");
var Js_exn = require("rescript/lib/js/js_exn.js");
var FsExtra = require("fs-extra");
var Caml_js_exceptions = require("rescript/lib/js/caml_js_exceptions.js");

function copyIfNotExist(fileName, fun) {
  if (Fs.existsSync(fileName)) {
    return Curry._1(fun, undefined);
  } else {
    return Fs.copyFile(Path.normalize(__dirname + "/" + fileName), fileName, (function (nullable) {
                  if (nullable == null) {
                    return Curry._1(fun, undefined);
                  } else {
                    return Js_exn.raiseError(nullable);
                  }
                }));
  }
}

function copyFolderIfNotExist(fileName, origin, fun) {
  if (Fs.existsSync(fileName)) {
    return Curry._1(fun, undefined);
  } else {
    return FsExtra.copy(Path.normalize(__dirname + "/" + origin), fileName, (function (nullable) {
                  if (nullable == null) {
                    return Curry._1(fun, undefined);
                  } else {
                    return Js_exn.raiseError(nullable);
                  }
                }));
  }
}

function readOrThrow(file, string) {
  try {
    return Fs.readFileSync(Path.normalize(file), "utf8");
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === Js_exn.$$Error) {
      return Js_exn.raiseError(string);
    }
    throw exn;
  }
}

function readOrCopy(fileName, fun) {
  return copyIfNotExist(fileName, (function (param) {
                return Curry._1(fun, readOrThrow(fileName, "‚ùå Could not find " + fileName));
              }));
}

function installAndThen(fileName, fun) {
  return readOrCopy(fileName, (function (jsonString) {
                var json = JSON.parse(jsonString);
                var templatesFrom = Util.getOrThrow(json.templatesFrom, "\xe2\x9d\x8c field \"templatesFrom\" is missing in elm-gen.json");
                return copyFolderIfNotExist(templatesFrom, "templates/", (function (param) {
                              return Curry._2(fun, json, templatesFrom);
                            }));
              }));
}

function write(source, args) {
  var dir = args.path;
  var generatedPath = dir + "/" + args.file;
  if (!Fs.existsSync(Path.normalize(dir))) {
    Fs.mkdirSync(Path.normalize(dir), {
          recursive: true
        });
  }
  return Fs.writeFileSync(Path.normalize(generatedPath), source, {
              flag: "w+"
            });
}

function remove(folder) {
  if (Fs.existsSync(Path.normalize(folder))) {
    return Fs.rmSync(Path.normalize(folder), {
                recursive: true
              });
  }
  
}

exports.copyIfNotExist = copyIfNotExist;
exports.copyFolderIfNotExist = copyFolderIfNotExist;
exports.readOrThrow = readOrThrow;
exports.readOrCopy = readOrCopy;
exports.installAndThen = installAndThen;
exports.write = write;
exports.remove = remove;
/* fs Not a pure module */
